<html>

<head>
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <script src="https://d3js.org/d3-color.v2.min.js"></script>
    <script src="https://d3js.org/d3-dispatch.v2.min.js"></script>
    <script src="https://d3js.org/d3-ease.v2.min.js"></script>
    <script src="https://d3js.org/d3-interpolate.v2.min.js"></script>
    <script src="https://d3js.org/d3-selection.v2.min.js"></script>
    <script src="https://d3js.org/d3-hierarchy.v2.min.js"></script>
    <script src="https://d3js.org/d3-timer.v2.min.js"></script>
    <script src="https://d3js.org/d3-transition.v2.min.js"></script>

    <style>
        body {
            font-family: Arial, Helvetica, sans-serif;
            background-color: #fff;
        }

        button {
            margin: 10px;
            font-size: 18px;
        }

        svg {
            position: absolute;
            top: 0;
            left: 0;
            z-index: -1;
            background-color: #fff;
        }

        .dot {
            fill: #ccc;
            stroke: #222;
            stroke-width: 2px;
        }

        .a0_18 {
            fill: #47B856;
            background-color: #47B856;
            color: #000;
            margin: 3px;
        }

        .a19_64 {
            fill: #5647B8;
            background-color: #5647B8;
            color: #000;
            margin: 3px;
        }

        .a65 {
            fill: #B85647;
            background-color: #B85647;
            color: #000;
            margin: 3px;
        }

        .conditions {
            fill: #7DAA55;
            background-color: #7DAA55;
            color: #000;
            margin: 3px;
        }

        .drugs {
            fill: #55A7AA;
            background-color: #55A7AA;
            color: #000;
            margin: 3px;
        }

        .procedures {
            fill: #8255AA;
            background-color: #8255AA;
            color: #000;
            margin: 3px;
        }

        .measurements {
            fill: #AA5855;
            background-color: #AA5855;
            color: #000;
            margin: 3px;
        }

        .male {
            fill: #47B856;
            color: #000;
            background-color: #47B856;
            margin: 3px;
        }

        .female {
            fill: #B847A9;
            background-color: #B847A9;
            color: #000;
            margin: 3px;
        }

        .annotation div {
            margin: 3px;
        }

        .african {
            fill: #8d5524;
        }

        .european {
            fill: #ffdbac;
        }

        .asian {
            fill: #f1c27d;
        }

        .unfilled {
            fill: #fff;
        }

        .visualization-header {
            width: 1000px;
            padding: 7px;
        }

        .visualization-title {
            font-size: 24px;
            color: #222;
            margin: 10px;
        }

        .visualization-authors {
            font-size: 16px;
            color: #444;
            margin-left: 10px;
            font-style: oblique;
        }

        .stop-scrolling {
            height: 100%;
            overflow: hidden;
        }

        .annotation {
            display: none;
            position: absolute;
            font-size: 16px;
            padding: 4px 20px 4px 20px;
            left: 300px;
            color: #222;
            text-align: center;
            width: 550px;
            margin-left: auto;
            margin-right: auto;
            top: 700px;
            opacity: 0.8;
            line-height: 1.5;
        }

        .annotation-top {
            top: 100px;
        }

        .annotation-center {
            background-color: #ccc;
            opacity: 0.8;
            top: 320;
            text-align: left;
            border-radius: 10px;
        }

        .annotation-start {
            display: block;
        }

        button {
            margin-left: auto;
            margin-right: auto;
            width: 200px;
            font-size: 16px;
        }

        .button {
            text-align: center;
        }

        .annotation-6 {
            top: 300px;
        }

        .big-number {
            font-size: 96px;
            padding: 10px;
            margin: 10px;
        }

        .annotation-fever {
            text-align: center;
        }

        .annotation-5 {
            text-align: center;
            background-color: #fff;
        }

        .annotation-covid {
            text-align: center;
            background-color: #fff;
        }

        .annotation-ventilation {
            text-align: center;
            background-color: #fff;
        }

        .annotation-tommy {
            position: absolute;
            top: 75px;
            left: 280px;
            width: 600px;
            height: 800px;
            text-align: center;
        }

        .commentary {
            font-size: 24px;
            line-height: 36px;
            padding: 12px;
        }
    </style>
</head>

<body class="stop-scrolling">
    <div class="visualization-header">
        <div class="visualization-title">COVID-19 Pandemic: Day 26</div>
        <div class="visualization-authors">A visualization by E.Voss & F.DeFalco</div>
    </div>

    <div class="annotation-start annotation-center annotation">
        April 6th, 2020 was the 26th day of the COVID-19 global pandemic as declared by the United States Centers for
        Disease Control and Prevention. <br /> <br />This
        visualization explores that day in a large US based claims system.
        <div>We start as we often do, by reviewing descriptive statistics.</div>
        <div class="button"><button onclick="showHighlight('visits')" type="button">click to begin</button>
        </div>
    </div>

    <div class="annotation-visits annotation">On April 6th, 966,695 people had at least one visit.
        <div class="button"><button onclick="showHighlight('we-can-stratify-by-sex')" type="button">click to
                continue</button></div>
    </div>

    <div class="annotation-we-can-stratify-by-sex annotation annotation-center">
        <div class="annotation-top">We can stratify the population by sex, age, or evaluate data density by domain.
        </div>
        <div class="button"><button onclick="showHighlight('stratify-by-sex')" type="button">click to continue</button>
        </div>
    </div>

    <div class="annotation-stratify-by-sex annotation">
        <div>Sex:</div>
        <div class="male">male: 42%
        </div>
        <div class="female">female: 58%</div>
        <div><button onclick="showHighlight(2)" type="button">click to continue</button></div>
    </div>

    <div class="annotation-2 annotation">
        <div>Age:</div>
        <div class="a0_18">0-18: 4%</div>
        <div class="a19_64">19-64: 41%</div>
        <div class="a65">65+: 55%</div>
        <div><button onclick="showHighlight('density')" type="button">click to continue</button></div>
    </div>

    <div class="annotation-density annotation">
        <div>Data Domain:</div>
        <div class="conditions">Conditions: 37%</div>
        <div class="measurements">Measurements: 27%</div>
        <div class="drugs">Drugs: 19%</div>
        <div class="procedures">Procedures: 17%</div>
        <div><button onclick="showHighlight('from-broad-to-narrow')" type="button">click to continue</button></div>
    </div>

    <div class="annotation-from-broad-to-narrow annotation">
        <div>Broad characterizations are often followed by analyses that focus on specific populations. We can focus on
            characteristics of the COVID-19 pandemic.</div>
        <div><button onclick="showHighlight('inpatient')" type="button">click to continue</button></div>
    </div>

    <div class="annotation-inpatient annotation">
        <div>38,856 people had an emergency room or inpatient visit</div>
        <div><button onclick="showHighlight('fever')" type="button">click to continue</button></div>
    </div>

    <div class="annotation-fever annotation">
        <div>5,180 people had claims for chest pains or fever</div>
        <div><button onclick="showHighlight(5)" type="button">click to continue</button></div>
    </div>

    <div class="annotation-5 annotation annotation-center">
        <div>
            Tested for SARS2-COV
        </div>
        <div class="big-number">221</div>
        <div><button onclick="showHighlight('covid')" type="button">click to continue</button></div>
    </div>

    <div class="annotation-covid annotation annotation-center">
        <div>
            Diagnosed with COVID-19
        </div>
        <div class="big-number">39</div>
        <div><button onclick="showHighlight('ventilation')" type="button">click to continue</button></div>
    </div>

    <div class="annotation-ventilation annotation annotation-center">
        <div>
            Received Ventilation
        </div>
        <div class="big-number">2</div>
        <div><button onclick="showHighlight(7)" type="button">click to continue</button></div>
    </div>

    <div class="annotation-7 annotation annotation-center">
        <div>Ultimately, every point of data reflects the journey of an individual.</div>
        <div class="button"><button onclick="showHighlight('tommy')" type="button">click to continue</button></div>
    </div>

    <div class="annotation annotation-tommy">
        <img class="profile-picture" src="tommy.png" />
        <div>April 6th, 1990 - April 6th, 2020</div>
        <div class="commentary">April 6th was Tommy Martins' 30th birthday as well as the day he died from COVID-19. He
            loved birthdays, singing, dancing, and
            super-hero movies. He knew every single Pokemon. He loved everyone he met; he was always happy.
            <br /><br />We will forever miss him. </div>
    </div>
</body>

<script>
    var size = 600;
    var offsetX = 300;
    var offsetY = 100;
    var transitionDuration = 750;
    var dotOpacity = 0.5;
    var dotCount = 1000;
    var dotField = [];
    var circles;

    function showHighlight(index) {
        d3.selectAll(".annotation").style("display", "none");

        d3.selectAll(".annotation-" + index)
            .transition()
            .delay(transitionDuration * 0.8)
            .attr("opacity", 0)
            .style("display", "block")
            .transition(t)
            .attr("opacity", 1);

        var t = d3.transition().duration(transitionDuration).ease(d3.easePolyInOut.exponent(4));

        switch (index) {
            case 'tommy':
                svg.selectAll(".dot")
                    .data(packedPopulation.leaves())
                    .enter()
                    .append("circle")
                    .attr("cx", d => d.data.outerX)
                    .attr("cy", d => d.data.outerY)
                    .attr("opacity", 0)
                    .transition(t)
                    .attr("cx", d => d.data.homeX)
                    .attr("cy", d => d.data.homeY)
                    .attr("r", d => d.r)
                    .attr("class", d => {
                        return "dot unfilled"
                    })
                    .attr("opacity", 1)
                    .transition(t)
                    .attr("opacity", 0.05);
                break;
            case 'covid':
                svg.selectAll(".dot")
                    .remove();
                break;
            case 5:
                svg.selectAll(".dot")
                    .remove();
                break;
            case 'inpatient':
                svg.selectAll(".dot")
                    .data(packedPopulation.leaves().slice(1, 40))
                    .exit()
                    .transition(t)
                    .attr("opacity", 0)
                    .remove();
                break;
            case 'fever':
                svg.selectAll(".dot")
                    .data(packedPopulation.leaves().slice(1, 6))
                    .exit()
                    .transition(t)
                    .attr("opacity", 0)
                    .remove();
                break;
            case 4:
                // attrition step 1
                svg.selectAll(".dot")
                    .data(packedPopulation.leaves().slice(1, 17))
                    .exit()
                    .transition(t)
                    .attr("opacity", 0)
                    .remove();
                break;
            case "from-broad-to-narrow":
                // back to overview
                svg.selectAll(".dot")
                    .data(packedPopulation.leaves())
                    .transition(t)
                    .attr("cx", d => d.x + offsetX)
                    .attr("cy", d => d.y + offsetY)
                    .attr("r", d => d.r)
                    .attr("class", d => {
                        return "dot " + d.data.race
                    })
                    .attr("opacity", 1);
                break;
            case 2:
                // back to overview
                svg.selectAll(".dot")
                    .data(packedPopulationByAge.leaves())
                    .transition(t)
                    .attr("cx", d => d.x + offsetX)
                    .attr("cy", d => d.y + offsetY)
                    .attr("r", d => d.r)
                    .attr("class", d => {
                        return "dot " + d.data.age
                    })
                    .attr("opacity", 1);
                break;
            case 'density':
                svg.selectAll(".dot")
                    .data(packedPopulationByDomain.leaves())
                    .transition(t)
                    .attr("r", d => d.r)
                    .attr("cx", d => d.x + offsetX)
                    .attr("cy", d => d.y + offsetY)
                    .attr("class", d => {
                        return "dot " + d.data.domain
                    })
                    .attr("opacity", 1);
                break;
            case 'stratify-by-sex':
                svg.selectAll(".dot")
                    .data(packedPopulationBySex.leaves())
                    .transition(t)
                    .attr("r", d => d.r)
                    .attr("cx", d => d.x + offsetX)
                    .attr("cy", d => d.y + offsetY)
                    .attr("class", d => {
                        return "dot " + d.data.sex
                    })
                    .attr("opacity", 1);
                break;
            case 'we-can-stratify-by-sex':
                svg.selectAll(".dot")
                    .data(packedPopulation.leaves())
                    .transition(t)
                    .attr("cx", d => d.data.homeX)
                    .attr("cy", d => d.data.homeY)
                    .attr("r", d => d.r)
                    .attr("class", "dot")
                    .attr("opacity", 0.1);
                break;
            case 'visits':
                // overview
                svg.selectAll(".dot")
                    .data(packedPopulation.leaves())
                    .transition(t)
                    .attr("cx", d => d.x + offsetX)
                    .attr("cy", d => d.y + offsetY)
                    .attr("r", d => d.r)
                    .attr("class", d => {
                        return "dot " + d.data.race
                    })
                    .attr("opacity", 1);

                break;
        }
    }

    function weightedRand(spec) {
        var i, j, table = [];
        for (i in spec) {
            for (j = 0; j < spec[i] * 10; j++) {
                table.push(i);
            }
        }
        return function () {
            return table[Math.floor(Math.random() * table.length)];
        }
    }

    var randSex = weightedRand({
        male: 0.42,
        female: 0.58
    });

    var randRace = weightedRand({
        african: 0.333,
        european: 0.333,
        asian: 0.333
    });

    var randAge = weightedRand({
        a0_18: 0.04,
        a19_64: 0.41,
        a65: 0.55
    });

    var randDomain = weightedRand({
        conditions: .37,
        drugs: .19,
        procedures: .17,
        measurements: .27
    });

    var data = [];
    var homeRadius = 350;
    for (i = 0; i < dotCount; i++) {

        var angle = 2 * Math.PI * Math.random();
        x = homeRadius * Math.cos(angle) + 600;
        y = homeRadius * Math.sin(angle) + 400;
        x2 = homeRadius * 2 * Math.cos(angle) + 600;
        y2 = homeRadius * 2 * Math.sin(angle) + 400;

        data.push({
            index: i,
            value: 2 + Math.random() * 5,
            homeX: x,
            homeY: y,
            outerX: x2,
            outerY: y2,
            sex: randSex(),
            race: randRace(),
            age: randAge(),
            domain: randDomain()
        });
    }

    var population = {
        name: "population",
        children: data
    };

    var pack = d3.pack()
        .padding(5)
        .size([size, size]);

    var svg = d3.select("body").append("svg")
        .attr("width", "100%")
        .attr("height", "100%")
        .append("g");

    var packedPopulation = pack(d3.hierarchy(population).sum(d => d.value));

    var populationBySex = {
        name: "sex stratified population",
        children: [{
                name: "male",
                children: data.filter(d => d.sex == "male")
            },
            {
                name: "female",
                children: data.filter(d => d.sex == "female")
            },
        ]
    };
    var packedPopulationBySex = pack(d3.hierarchy(populationBySex).sum(d => d.value));

    var populationByAge = {
        name: "age stratified population",
        children: [{
                name: "a0_18",
                children: data.filter(d => d.age == "a0_18")
            },
            {
                name: "a19_64",
                children: data.filter(d => d.age == "a19_64")
            },
            {
                name: "a65",
                children: data.filter(d => d.age == "a65")
            },
        ]
    };
    var packedPopulationByAge = pack(d3.hierarchy(populationByAge).sum(d => d.value));

    var populationByDomain = {
        name: "domain stratified population",
        children: [{
                name: "drugs",
                children: data.filter(d => d.domain == "drugs")
            },
            {
                name: "conditions",
                children: data.filter(d => d.domain == "conditions")
            },
            {
                name: "procedures",
                children: data.filter(d => d.domain == "procedures")
            },
            {
                name: "measurements",
                children: data.filter(d => d.domain == "measurements")
            },
        ]
    };
    var packedPopulationByDomain = pack(d3.hierarchy(populationByDomain).sum(d => d.value));

    circles = svg.selectAll(".dot")
        .data(packedPopulation.leaves().sort((a, b) => {
            return a.index - b.index
        }))
        .enter()
        .append("circle")
        .attr("cx", d => d.data.homeX)
        .attr("cy", d => d.data.homeY)
        .attr("r", d => d.r)
        .attr("class", "dot")
        .attr("sex", d => d.data.sex)
        .attr("opacity", 0.1);

    var caseCount = 27;
    var caseData = []
    for (var i = 0; i < caseCount; i++) {
        caseData.push({
            value: 1
        });
    }
    var cases = {
        name: "cases",
        children: caseData
    };
    var packedCases = pack(d3.hierarchy(cases).sum(d => d.value));
</script>

</html>